/**
 * 
 */
package util;

import java.io.Serializable;
import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.RandomAccess;

/**
 * @author fuzho
 *
 */
public class Vector<E> extends AbstractList<E> 
    implements List<E>, RandomAccess, Cloneable, Serializable {

	/**
	 * generated by Eclipse
	 */
	private static final long serialVersionUID = -6990190414953663029L;
	
	private final static int DEFAULT_VECTOR_SIZE = 100;
	private final static int DEFAULT_INCRMENT = 10;
	
	protected Object[] ds;
	protected int numberOfElement;
	protected int incr;
	
	public Vector(int vsz ,int inc) {
		if (vsz < 0) throw new IllegalArgumentException("Illegal VectorSize : "+ vsz);
		if (inc < 0) throw new IllegalArgumentException("Illegal increment number : "+ inc);
		ds = new Object[vsz];
		incr = inc;
		numberOfElement = 0;
		modCount ++ ;
	}
	public Vector(int vsz) {
		this(vsz , DEFAULT_INCRMENT);
	}
	public Vector() {
		this(DEFAULT_VECTOR_SIZE);
	}
	public Vector(Collection<? extends E> c) {
		ds = c.toArray();
		numberOfElement = ds.length;
		vectorSize = ds.length;
	}
	
	private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
	private void autoGrow(int i) {
		int oldSize = ds.length;
		int newSize = oldSize + ((incr == 0) ? oldSize : incr);
		if (newSize < i) newSize = i;
		if (newSize - MAX_ARRAY_SIZE > 0) newSize = MAX_ARRAY_SIZE;
		ds = Arrays.copyOf(ds, newSize);
		modCount ++;
	}
	private void insertElementAt(int index,Object obj) {
		if (index > numberOfElement) throw new ArrayIndexOutOfBoundsException(index);
		arraySpaceTest(numberOfElement + 1);
		System.arraycopy(ds, index, ds, index+1, numberOfElement-index);
		ds[index] = obj;
		numberOfElement ++;
		modCount ++;
	}
	private void arraySpaceTest(int i) {
		if (ds.length < i) autoGrow(i);
	}
	@SuppressWarnings("unchecked")
	@Override
	public E get(int index) {
		if (index >= numberOfElement) throw new ArrayIndexOutOfBoundsException("this element at index : ["+ index+"] is not exists ");
		return (E) ds[index];
	}
	
	@Override
	public E set(int index, E element) {
		E oldElement = get(index); // if you can get it, you must can set it.
		ds[index] = element;
		return oldElement;
	}
	@Override
	public boolean add(E e) {
		modCount++;
		arraySpaceTest(numberOfElement + 1);
		ds[numberOfElement++] = e;
		return true;
	}
	@Override
	public void add(int index, E element) {
		insertElementAt(index, element);
	}
	@Override
	public int size() {
		return numberOfElement;
	}
	
	@Override
	public boolean isEmpty() {
		return numberOfElement == 0;
	}
	
	public int vsz() {
		return ds.length;
	}
	
	public void copyToAnArray(Object[] array) {
		System.arraycopy(ds, 0, array, 0, numberOfElement);
	}
	public void dropUselessSpace() {
		if (ds.length > numberOfElement) {
			ds = Arrays.copyOf(ds, numberOfElement);
		}
		modCount++;
	}
	public void setSize(int s) {
		if (s > ds.length) {
			arraySpaceTest(s);
		} else {
			for (int i = s; i<numberOfElement;i++)
				ds[i] = null;
			numberOfElement = s;
		}
		modCount++;
	}
}
