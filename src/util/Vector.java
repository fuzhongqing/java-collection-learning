/**
 * 
 */
package util;

import java.io.Serializable;
import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.RandomAccess;

import org.junit.internal.ArrayComparisonFailure;

/**
 * @author fuzho
 *
 */
public class Vector<E> extends AbstractList<E> 
    implements List<E>, RandomAccess, Cloneable, Serializable {

	/**
	 * generated by Eclipse
	 */
	private static final long serialVersionUID = -6990190414953663029L;
	
	private final static int DEFAULT_VECTOR_SIZE = 100;
	private final static int DEFAULT_INCRMENT = 10;
	
	protected Object[] ds;
	protected int numberOfElement;
	protected int incr;
	
	public Vector(int vsz ,int inc) {
		if (vsz < 0) throw new IllegalArgumentException("Illegal VectorSize : "+ vsz);
		if (inc < 0) throw new IllegalArgumentException("Illegal increment number : "+ inc);
		ds = new Object[vsz];
		incr = inc;
		numberOfElement = 0;
		modCount ++ ;
	}
	public Vector(int vsz) {
		this(vsz , DEFAULT_INCRMENT);
	}
	public Vector() {
		this(DEFAULT_VECTOR_SIZE);
	}
	public Vector(Collection<? extends E> c) {
		ds = c.toArray();
		numberOfElement = ds.length;
	}
	
	private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
	private void autoGrow(int i) {
		int oldSize = ds.length;
		int newSize = oldSize + ((incr == 0) ? oldSize : incr);
		if (newSize < i) newSize = i;
		if (newSize - MAX_ARRAY_SIZE > 0) newSize = MAX_ARRAY_SIZE;
		ds = Arrays.copyOf(ds, newSize);
		modCount ++;
	}
	private void arraySpaceTest(int i) {
		if (ds.length < i) autoGrow(i);
	}
	@SuppressWarnings("unchecked")
	@Override
	public E get(int index) {
		if (index >= numberOfElement) throw new ArrayIndexOutOfBoundsException("this element at index : ["+ index+"] is not exists ");
		return (E) ds[index];
	}
	
	@Override
	public E set(int index, E element) {
		E oldElement = get(index); // if you can get it, you must can set it.
		ds[index] = element;
		return oldElement;
	}
	@Override
	public boolean add(E e) {
		modCount++;
		arraySpaceTest(numberOfElement + 1);
		ds[numberOfElement++] = e;
		return true;
	}
	@Override
	public void add(int index, E element) {
		insertElementAt(index, element);
	}
	@Override
	public int size() {
		return numberOfElement;
	}
	
	@Override
	public boolean isEmpty() {
		return numberOfElement == 0;
	}
	
	public int vsz() {
		return ds.length;
	}
	
	public void copyToAnArray(Object[] array) {
		System.arraycopy(ds, 0, array, 0, numberOfElement);
	}
	public void dropUselessSpace() {
		if (ds.length > numberOfElement) {
			ds = Arrays.copyOf(ds, numberOfElement);
		}
		modCount++;
	}
	public void setSize(int s) {
		if (s > ds.length) {
			arraySpaceTest(s);
		} else {
			for (int i = s; i<numberOfElement;i++)
				ds[i] = null;
			numberOfElement = s;
		}
		modCount++;
	}
	public Enumeration<E> elements() {
		return elements(0);
	}
	public Enumeration<E> elements(int index) {
		return new Enumeration<E>() {
			
			int currPostion = index;
			@Override
			public boolean hasMoreElements() {
				return currPostion < numberOfElement;
			}

			@SuppressWarnings("unchecked")
			@Override
			public E nextElement() {
				return hasMoreElements() ? (E) ds[currPostion++] : null;
			}
		};
	}
	
	public int indexOf(Object o, int index) {
		if (o == null) {
			for (int i = index; i < numberOfElement; ++i)
				if (ds[i] == null) return i;
		} else {
			for (int i = index; i < numberOfElement; ++i)
				if (ds[i].equals(o)) return i;
		}
		return -1;
	}
	
	public int indexOf(Object o) {
		return indexOf(o, 0);
	}
	
	public boolean contains(Object o) {
		return (indexOf(o)!=-1);
	}
	
	public int lastIndexOf(Object o, int index) {
		if (index >= numberOfElement) throw new IndexOutOfBoundsException(index + " >= " 
																          + numberOfElement);
		if (o== null) {
			for (int i = index;i>=0;--i) {
				if (ds[i]==null)
					return i;
			} 
		}else {
			for (int i = index;i>=0;--i) {
				if (ds[i].equals(o))
					return i;
			} 
		}
		return -1;
	}
	
	public int lastIndexOf(Object o) {
		return lastIndexOf(o,numberOfElement - 1);
	}
	
	@SuppressWarnings("unchecked")
	public E elementAt(int index) {
		if (index >=  numberOfElement) throw new ArrayIndexOutOfBoundsException(index + " >= "
																				+ numberOfElement);
		return (E) ds[index];
	}
	
	public E firstElement() {
		if (numberOfElement == 0) throw new NoSuchElementException();
		return elementAt(0);
	}
	
	public E lastElement() {
		if (numberOfElement == 0) throw new NoSuchElementException();
		return elementAt(numberOfElement - 1); 
	}
	
	public void setElementAt(Object o,int index) {
		if (index >= numberOfElement) throw new ArrayIndexOutOfBoundsException(index + " >= "+
																			   numberOfElement);
		ds[index] = o;
	}
	
	public void removeElementAt(int index) {
		if (index >= numberOfElement) throw new ArrayIndexOutOfBoundsException(index + " >= "+
				   numberOfElement);
		if (index < 0) throw new ArrayIndexOutOfBoundsException(index + " < 0");
		int FragmentSize = numberOfElement - index - 1;
		
		if (FragmentSize > 0) System.arraycopy(ds, index + 1, ds, index, FragmentSize);
		numberOfElement --;
		ds[numberOfElement] = null; //尾部产生一个多余元素 等待GC回收
	}
	private void insertElementAt(int index,Object obj) {
		if (index > numberOfElement) throw new ArrayIndexOutOfBoundsException(index);
		arraySpaceTest(numberOfElement + 1);
		System.arraycopy(ds, index, ds, index+1, numberOfElement-index);
		ds[index] = obj;
		numberOfElement ++;
		modCount ++;
	}
	public void insertElementAt(E o ,int index) {
		insertElementAt(index, o);
	}
	public void addElement(E o) {
		add(o);
	}
	public boolean removeFirstElement(Object o) {
		int index = indexOf(o);
		if (index != -1) {
			removeElementAt(index);
			modCount ++;
			return true;
		}
		modCount ++;
		return false;
	}
	
	public void removeAllElement() {
		for (int i = 0;i < numberOfElement; ++i) {
			ds[i] = null;
		}
		numberOfElement = 0;
		modCount ++;
	}
	@SuppressWarnings("unchecked")
	public Object clone() throws CloneNotSupportedException {
		Vector<E> o = new Vector<>(vsz(), incr);
		o = (Vector<E>) super.clone();
		o.ds = this.ds;
		o.modCount = 0;
		o.numberOfElement = this.numberOfElement;
		return o;
	}
	
	public Object[] toArray() {
		return Arrays.copyOf(ds, numberOfElement);
	}
	
	public boolean equals(Object o) {
		return super.equals(o);
	}
	public int hashCode() {
		return super.hashCode();
	}
	public String toString() {
		return super.toString();
	}
}
